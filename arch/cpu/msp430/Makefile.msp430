COOJA_PATH ?= $(CONTIKI_NG_TOOLS_DIR)/cooja

ifdef nodeid
CFLAGS += -DNODEID=$(nodeid)
endif

CFLAGS += -gstabs+

### Define the CPU directory
CONTIKI_CPU = $(CONTIKI_NG_RELOC_CPU_DIR)/msp430

### Define the source files we have in the MSP430 port

ifndef CONTIKI_CPU_FAM_DIR
 ifneq (,$(findstring msp430f1,$(MCU)))
  CONTIKI_CPU_FAM_DIR = f1xxx
 endif
endif
ifndef CONTIKI_CPU_FAM_DIR
 ifneq (,$(findstring msp430f5,$(MCU)))
  CONTIKI_CPU_FAM_DIR = f5xxx
 endif
endif
ifndef CONTIKI_CPU_FAM_DIR
 ifneq (,$(findstring msp430f2,$(MCU)))
  CONTIKI_CPU_FAM_DIR = f2xxx f1xxx
 endif
endif
ifndef CONTIKI_CPU_FAM_DIR
 ${error Unhandled MSP430 family: "$(MCU)"}
endif

CONTIKI_CPU_DIRS = $(CONTIKI_CPU_FAM_DIR) . dev

MSP430     = msp430.c flash.c clock.c leds.c leds-arch.c \
             watchdog.c lpm.c rtimer-arch.c int-master.c
UIPDRIVERS = crc16.c

CONTIKI_TARGET_SOURCEFILES += $(MSP430) \
                              $(SYSAPPS) \
                              $(UIPDRIVERS)

CONTIKI_SOURCEFILES        += $(CONTIKI_TARGET_SOURCEFILES)

### Compiler definitions

ifeq ($(WERROR),1)
CFLAGSWERROR= -Wall -Werror
endif

CC       = msp430-elf-gcc
CXX      = msp430-elf-g++
LD       = msp430-elf-gcc
AS       = msp430-elf-as
AR       = msp430-elf-ar
NM       = msp430-elf-nm
OBJCOPY  = msp430-elf-objcopy
STRIP    = msp430-elf-strip
SIZE     = msp430-elf-size
BSL      = msp430-elf-bsl

OLD_MSP430LIBC ?= /usr/local/old-msp430-libc/msp430
TINY_MSP430LIBC ?= /usr/local/msp430-libc-tiny/msp430-elf

CFLAGS += -ffunction-sections -fdata-sections -mrelax -flto
LDFLAGS += -v -Wl,--gc-sections -mtiny-printf -mrelax -flto

ifdef CPU_HAS_MSP430X
  ifeq ($(TARGET_MEMORY_MODEL),large)
    # Code and data in lower region, linker shuffles code that does not fit.
    CFLAGS += -mlarge -mcode-region=either
    LDFLAGS += -mlarge -mcode-region=either
    LDFLAGS += -L$(TINY_MSP430LIBC)/lib/large
  else
    LDFLAGS += -L$(TINY_MSP430LIBC)/lib
  endif
else
  LDFLAGS += -L$(TINY_MSP430LIBC)/lib/430
#  CFLAGS += -nostdlib -I$(OLD_MSP430LIBC)/include
# LDFLAGS += -nostdlib -L$(OLD_MSP430LIBC)/lib/430
#  TARGET_LIBFILES += -lgcc -Wl,--start-group -lmul_16 -lc -lgcc -lcrt -lnosys -Wl,--end-group -Wl,--script=$(MCU).ld -lgcc /usr/local/lib/gcc/msp430-elf/9.3.1/430/crtend_no_eh.o -lgcc
endif

ifndef CFLAGSNO
CFLAGSNO = -Wall -mmcu=$(MCU) $(CFLAGSWERROR)
endif
CFLAGS  += -Os -fno-strict-aliasing
LDFLAGS += -mmcu=$(MCU) -Wl,-Map=$(CONTIKI_NG_PROJECT_MAP)

# .crt_0100init_bss .crt_0200init_highbss
# .crt_0300movedata .crt_0400move_highdata .crt_0500run_preinit_array
# .crt_0600run_init_array .crt_0710run_smi_location_init_array

### These flags can reduce the code size and RAM usage with up to 10%
SMALL ?= 1
ifeq ($(SMALL),1)
CFLAGS += -ffunction-sections
# CFLAGS += -fdata-sections
LDFLAGS += -Wl,--gc-sections,--undefined=_reset_vector__,--undefined=InterruptVectors,--undefined=_copy_data_init__,--undefined=_clear_bss_init__,--undefined=_end_of_init__
endif # SMALL

# Define the `_stack` symbol used by the stack check library to be equal to `_end`
LDFLAGS += -Wl,--defsym=_stack=_end

CFLAGS  += $(CFLAGSNO)

PROJECT_OBJECTFILES += ${addprefix $(OBJECTDIR)/,$(CONTIKI_TARGET_MAIN:.c=.o)}

### CPU-dependent cleanup files
CLEAN += *.firmware *.ihex

### Compilation rules

%-stripped.o: %.c
	$(CCACHE) $(CC) $(CFLAGS) -c $< -o $@
	$(STRIP) --strip-unneeded -g -x $@

%-stripped.o: %.o
	$(STRIP) --strip-unneeded -g -x -o $@ $<

%.firmware:	%.${TARGET}
	mv $< $@

%.ihex: %.$(TARGET)
	$(OBJCOPY) $^ -O ihex $@

$(COOJA_PATH)/build.xml:
	@echo '----------------'
	@echo 'Could not find the COOJA build file. Did you run "git submodule update --init --recursive"?'
	@echo '----------------'

$(COOJA_PATH)/mspsim/build.xml: $(COOJA_PATH)/build.xml
	@echo '----------------'
	@echo 'Could not find the MSPSim build file. Did you run "git submodule update --init --recursive"?'
	@echo '----------------'

$(COOJA_PATH)/mspsim/mspsim.jar: $(COOJA_PATH)/mspsim/build.xml
	cd $(COOJA_PATH)/mspsim && ant jar

%.mspsim:	%.${TARGET} ${COOJA_PATH}/mspsim/mspsim.jar
	$(JAVA) -jar ${COOJA_PATH}/mspsim/mspsim.jar -platform=${TARGET} $<

%.mspsim-maptable: %.$(TARGET)
	$(JAVA) -classpath ${COOJA_PATH}/mspsim/mspsim.jar se.sics.mspsim.util.MapTable $(CONTIKI_NG_PROJECT_MAP)
